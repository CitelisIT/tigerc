plugins {
    id 'java'
    id 'application'
    id 'antlr'
}

repositories {
    mavenCentral()
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
            excludes = []
        }
    }
}

application {
    mainClass = "Main"
}

generateGrammarSource {
    outputDirectory = file("src/main/java/parser")
    arguments += ["-no-listener", "-visitor"]
}

dependencies {
    antlr 'org.antlr:antlr4:4.9.2'
}

import java.util.concurrent.TimeUnit

tasks.register("tree") {
    dependsOn "clean"
    dependsOn "build"
    tasks.findByName("build").mustRunAfter "clean"
    doLast {
        if (project.hasProperty("inFile")) {
            def startTime = System.nanoTime()
            def totalTime
            logTask "Generating parse tree vizualisation from file ${inFile}"
            logCmd "java -cp build/classes/java/main/:build/libs/:lib/antlr-4.9.2-complete.jar Main ${inFile} --parse-tree"
            def cmdError = new ByteArrayOutputStream()
            exec {
                commandLine "java", "-cp", "build/classes/java/main/:build/libs/:lib/antlr-4.9.2-complete.jar", "Main", inFile, "--parse-tree",
                errorOutput = cmdError
                ignoreExitValue = true
            }
            if (cmdError.size() != 0) {
                logError(cmdError.toString())
                totalTime = TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS);
                println "${project.ext.ansiBold}${project.ext.ansiRed}TASK FAILED${project.ext.ansiReset} in ${totalTime}ms"
                return
            }
            logInfo "Parse tree vizualisation generated"

            totalTime = TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS);
            println "\n${project.ext.ansiBold}${project.ext.ansiGreen}TASK SUCCESSFUL${project.ext.ansiReset} in ${totalTime}ms"
        }
    } 
}

tasks.register("dot") {
    dependsOn "clean"
    dependsOn "build"
    tasks.findByName("build").mustRunAfter "clean"
    doLast {
        if (project.hasProperty("inFile") && project.hasProperty("outFile")) {
            def startTime = System.nanoTime()
            def totalTime
            logTask "Generating dot representation of AST from file ${inFile}"
            logCmd "java -cp build/classes/java/main/:build/libs/:lib/antlr-4.9.2-complete.jar Main ${inFile} --ast ${outFile}"
            def cmdError = new ByteArrayOutputStream()
            exec {
                commandLine "java", "-cp", "build/classes/java/main/:build/libs/:lib/antlr-4.9.2-complete.jar", "Main", inFile, "--ast", outFile
                errorOutput = cmdError
                ignoreExitValue = true
            }
            if (cmdError.size() != 0) {
                logError(cmdError.toString())
                totalTime = TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS);
                println "${project.ext.ansiBold}${project.ext.ansiRed}TASK FAILED${project.ext.ansiReset} in ${totalTime}ms"
                return
            }
            logInfo "Dot representation of AST generated"

            totalTime = TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS);
            println "\n${project.ext.ansiBold}${project.ext.ansiGreen}TASK SUCCESSFUL${project.ext.ansiReset} in ${totalTime}ms"
        }
    } 
}